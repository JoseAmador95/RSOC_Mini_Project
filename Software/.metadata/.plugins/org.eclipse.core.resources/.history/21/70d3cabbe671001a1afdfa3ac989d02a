/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   115200
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "xparameters.h"
#include "platform.h"
#include "xil_printf.h"
#include "xiomodule.h"
#include "xgpio.h"

enum MUSIC_NOTES{
	MUSIC_NULL = '0',
	MUSIC_C,
	MUSIC_D,
	MUSIC_E,
	MUSIC_F,
	MUSIC_G,
	MUSIC_A,
	MUSIC_B
};

int main()
{
	XIOModule iomodule, gpo;
    uint8_t note;
    int data;

	init_platform();

	print("Hello World\n\r");

	data = XIOModule_Initialize(&iomodule, XPAR_IOMODULE_0_DEVICE_ID);
	XIOModule_Initialize(&gpo, XPAR_IOMODULE_0_DEVICE_ID);
	xil_printf("Init: %d\r\n", data);
	data = XIOModule_Start(&iomodule);
	XIOModule_Start(&gpo);
	xil_printf("Start: %d\r\n", data);
	data = XIOModule_CfgInitialize(&iomodule, NULL, NULL);
	xil_printf("Cfg: %d\r\n", data);

	while(1){
		data = XIOModule_Recv(&iomodule, &note, 1);
		if(data){
			xil_printf("The number of bytes received was %d\n\r", data);
			xil_printf("Recv: The received char was %c\n\r", note);
			//for (int i = 0; i < 8; ++i)
			//	XIOModule_DiscreteWrite(&gpo, i, 0);
			if (note != '0') {
				xil_printf("%d", 8 - (note-48));
				XIOModule_DiscreteWrite(&gpo, 8 - (note-48), 1);
				//XIOModule_WriteReg(iomodule.BaseAddress, 0, 1 << (8 - (note - 48)));
			}
		}
		//XIOModule_Recv(&iomodule, &note, 0);
		//for (uint32_t i = 0; i < 1000000; ++i);
	}

    cleanup_platform();
    return 0;
}
